---
title: "Combining Raster and Vector Data"
subtitle: "HES 505 Fall 2024: Session 16"
author: "Carolyn Koehn"
format: 
  revealjs:
    theme: mytheme.scss
    slide-number: true
    show-slide-number: print
    self-contained: true  
---

# Today's Plan {background="#43464B" background-image="img/slide_10/NEDUS.gif" background-opacity="0.7"}

::: footer
Image Source: USGS
:::

## Objectives

- By the end of today, you should be able to:
  
  - Convert between raster and vector datasets
  
  - Generate new rasters describing the spatial arrangement of vector data
  
  - Extract raster values as attributes of vector data


# Converting Between Formats {background="#0033A0"}

## Converting Between Formats

* Using coercion (`as`, `rast`, `vect`) can change `class`, but not data model

* Sometimes we need to actually change the data model

## Converting Vectors to Rasters Using `rasterize`

* A special kind of data aggregation

* `x` is your `SpatVector` object

* `y` is a template raster with the appropriate CRS, resolution, and extent

* `fun` allows you to specify the value of the resulting raster

## Using `rasterize`
::: {style="font-size: 0.7em"}
* Presence/Absence
* `field` specifies which value should be returned to non-empty cells
:::

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.7em"}
```{r}
#| include: false

library(tidyverse, quietly = TRUE)
library(sf)
library(terra)

hospitals_pnw <- read_csv("C:/Users/carolynkoehn/Documents/HES505_Fall_2024/data/2023/assignment06/landmarks_pnw.csv") %>%
  filter(., MTFCC == "K2543") %>%
  st_as_sf(., coords = c("longitude", "latitude"), crs=4269) %>%
  st_transform(crs = 5070)
```
```{r}
#| eval: false
#| echo: true

hospitals_pnw <- read_csv("/opt/data/data/assignment06/landmarks_pnw.csv") %>%
  filter(., MTFCC == "K2543") %>%
  st_as_sf(., coords = c("longitude", "latitude"), crs=4269) %>%
  st_transform(crs = 5070)
```
```{r}
#| echo: true

raster_template = rast(ext(hospitals_pnw), resolution = 10000,
                       crs = st_crs(hospitals_pnw)$wkt)

hosp_raster1 = rasterize(hospitals_pnw, raster_template,
                         field = 1)
```

:::
:::
::: {.column width="40%"}
```{r}
#| fig-width: 6
#| fig-height: 6
plot(hosp_raster1, colNA = "navy")

```
:::
:::

## Using `rasterize`
::: {style="font-size: 0.7em"}
* The `fun` argument specifies how we aggregate the data

* Useful for counting occurrences (using `length`)
:::

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.7em"}
```{r}
#| echo: true
hosp_raster2 = rasterize(hospitals_pnw, raster_template, 
                         fun = "length")
```
:::
:::
::: {.column width="40%"}
```{r}
#| fig-width: 6
#| fig-height: 6
plot(hosp_raster2)

```
:::
:::

## Using `rasterize`
::: {style="font-size: 0.7em"}
* The `fun` argument specifies how we aggregate the data

* Can use a variety of functions
:::

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.7em"}
```{r}
#| echo: true
hospitals_pnw$rand_capacity <- rnorm(n = nrow(hospitals_pnw),
                                     mean = 5000,
                                     sd = 2000)

hosp_raster3 = rasterize(hospitals_pnw, raster_template, 
                         field = "rand_capacity", fun = sum)
```
:::
:::
::: {.column width="40%"}
```{r}
#| fig-width: 6
#| fig-height: 6
plot(hosp_raster3)
```
:::
:::

## Lines and Polygons

* Can use `rasterize` or `stars::st_rasterize`
* Result depends on the `touches` argument

![](img/slide_13/rasterizing-raster-1.png){width=450, height=450}



## Converting rasters to vectors

* Less common, but can convert to vector data

* `as.points`, `as.countour`, and `polygonize`

::: columns
::: {.column width="60%"}
::: {style="font-size: 0.7em"}
```{r}
#| echo: true
dem = rast(system.file("raster/dem.tif", package = "spDataLarge"))
cl = as.contour(dem)
```
:::
:::
::: {.column width="40%"}
```{r}
#| fig-width: 6
#| fig-height: 6
plot(dem, axes = FALSE)
plot(cl, add = TRUE)
```
:::
:::

# Generating New Data {background="#0033A0"}

## Generating New Data

* Sometimes we want a raster describing the spatial context of vector data

* `distance` is a simple method

* We'll use interpolation in the next few weeks

## Generating Distance Rasters
* returns a distance matrix or `SpatRaster`


```{r}
#| echo: true
hosp_dist <- distance(vect(hospitals_pnw))
head(as.matrix(hosp_dist))[1:5, 1:5]
```

## Generating Distance Rasters
* returns a distance matrix or `SpatRaster`

```{r}
#| echo: true
raster_template = rast(ext(hospitals_pnw), resolution = 1000,
                       crs = st_crs(hospitals_pnw)$wkt)
hosp_raster1 = rasterize(hospitals_pnw, raster_template,
                       field = 1)

hosp_dist_rast <- distance(hosp_raster1)
plot(hosp_dist_rast)
```


## Creating Vector Data by Extraction

* Sometimes we want to use rasters to create new attributes

* `fun` controls how the cells are aggregated

```{r}
#| include: false

wildfire_haz <- rast("C:/Users/carolynkoehn/Documents/HES505_Fall_2024/data/2023/assignment07/wildfire_hazard_agg.tif")
```
```{r}
#| echo: true
#| eval: false

wildfire_haz <- rast("/opt/data/data/assignment07/wildfire_hazard_agg.tif")
```
```{r}
#| echo: true

hospitals_pnw_proj <- st_transform(hospitals_pnw, crs(wildfire_haz))

hosp_fire_haz <- terra::extract(wildfire_haz, hospitals_pnw_proj)
head(hosp_fire_haz)
```

## Creating Vector Data by Extraction

- Can use `zonal` for one summary statistic for polygons

```{r}
#| include: false

cejst <- st_read("C:/Users/carolynkoehn/Documents/HES505_Fall_2024/data/2023/assignment06/cejst_pnw.shp") %>%
  st_transform(crs = crs(wildfire_haz)) %>%
  filter(!st_is_empty(.))
```
```{r}
#| echo: true
#| eval: false

cejst <- st_read("/opt/data/data/assignment06/cejst_pnw.shp") %>%
  st_transform(crs = crs(wildfire_haz)) %>%
  filter(!st_is_empty(.))
```
```{r}
#| echo: true

wildfire.zones <- terra::zonal(wildfire_haz, vect(cejst), fun="mean", na.rm=TRUE)

head(wildfire.zones)
```

## 3 ways to extract raster data for polygons

```{r}
#| echo: true

system.time(wildfire.zones <- terra::zonal(wildfire_haz, vect(cejst), fun="mean", na.rm=TRUE))

system.time(wildfire.zones2 <- terra::extract(wildfire_haz, vect(cejst), fun=mean, na.rm=TRUE))

system.time(wildfire.zones3 <- exactextractr::exact_extract(wildfire_haz, cejst, fun="mean", progress = FALSE))
```


::: columns
::: {.column width="30%"}
```{r}
head(wildfire.zones)
```
:::
::: {.column width="30%"}
```{r}
head(wildfire.zones2)
```
:::
::: {.column width="30%"}
```{r}
head(wildfire.zones3)
```
:::
:::

# Motivating Question {background="#9F281A"}

> How do Collaborative Forest Landscape Restoration projects compare to other National Forest lands with respect to social and wildfire risks?

## Thinking about the data

* **Datasets** - Forest Service Boundaries, CFLRP Boundaries, Wildfire Risk Raster, CEJST shapefile

* **Dependent Variable** - CFLRP (T or F)

* **Independent Variables** - Wildfire hazard, income, education, housing burden

## Building some Pseudocode

```{r}
#| eval: false
#| echo: true

1. Load libraries
2. Load data
3. Check validity and alignment
4. Subset to relevant geographies
5. Select relevant attributes
6. Extract wildfire risk
7. CFLRP T or F
8. Compare risks

```

## Load libraries

```{r}
#| echo: true
library(sf)
library(terra)
library(tidyverse)
library(tmap)

```


## Load the data

- Downloading USFS data using the function in the `code` folder

```{r}
#| echo: true
#| cache: true

download_unzip_read <- function(link){
  tmp <- tempfile()
  download.file(link, tmp)
  tmp2 <- tempfile()
  unzip(zipfile=tmp, exdir=tmp2)
  shapefile.sf <- read_sf(tmp2)
}

### FS Boundaries
fs.url <- "https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.AdministrativeForest.zip"
fs.bdry <- download_unzip_read(link = fs.url)

### CFLRP Data
cflrp.url <- "https://data.fs.usda.gov/geodata/edw/edw_resources/shp/S_USA.CFLR_HPRP_ProjectBoundary.zip"
cflrp.bdry <- download_unzip_read(link = cflrp.url)
```
